from blenderproc.python.utility.BlenderUtility import get_all_blender_mesh_objects
from blenderproc.python.modules.utility.ItemWriter import ItemWriter
from blenderproc.python.modules.writer.WriterInterface import WriterInterface
from blenderproc.python.writer.WriterUtility import _WriterUtility

def export_sdf(world_el, prefix_path, mesh_objects):
    meshes_folder_prefix = 'meshes/'

    for mesh_object in mesh_objects:
        dae_filename = mesh_object.name()+'.dae'
        model_name = mesh_object.name()

        # Deselect all objects
        bpy.ops.object.select_all(action='DESELECT')
    
        mesh_object.select_set(True)    
        # Exports the dae file and its associated textures
        bpy.ops.wm.collada_export(filepath=prefix_path+meshes_folder_prefix+dae_filename, check_existing=False, filter_blender=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_btx=False, filter_collada=True, filter_folder=True, filemode=8, use_selection=True)

        # 1 model and 1 link
        model = ET.SubElement(world_el, "model", attrib={"name":"test"})
        static = ET.SubElement(model, "static")
        static.text = "true"
        link = ET.SubElement(model, "link", attrib={"name":"testlink"})
        # for each geometry in geometry library add a <visual> tag
        visual = ET.SubElement(link, "visual", attrib={"name":o.name})

        geometry = ET.SubElement(visual, "geometry")
        mesh = ET.SubElement(geometry, "mesh")
        uri = ET.SubElement(mesh, "uri")
        uri.text = dae_filename
        submesh = ET.SubElement(mesh, "submesh")
        submesh_name = ET.SubElement(submesh, "name")
        submesh_name.text = o.name
        
        # grab diffuse/albedo map
        diffuse_map = ""    
        nodes = o.active_material.node_tree.nodes
        principled = next(n for n in nodes if n.type == 'BSDF_PRINCIPLED')
        if principled is not None:
            base_color = principled.inputs['Base Color'] #Or principled.inputs[0]
            value = base_color.default_value
            if len(base_color.links):
                link_node = base_color.links[0].from_node
                diffuse_map = link_node.image.name
        
        # setup diffuse/specular color
        material = ET.SubElement(visual, "material")
        diffuse = ET.SubElement(material, "diffuse")
        diffuse.text = "1.0 1.0 1.0 1.0"
        specular = ET.SubElement(material, "specular")
        specular.text = "0.0 0.0 0.0 1.0"
        pbr = ET.SubElement(material, "pbr")
        metal = ET.SubElement(pbr, "metal")

        ## sdf collision tags
        collision = ET.SubElement(link, "collision", attrib={"name":"collision"})

        geometry = ET.SubElement(collision, "geometry")
        mesh = ET.SubElement(geometry, "mesh")
        uri = ET.SubElement(mesh, "uri")
        uri.text = dae_filename

        surface = ET.SubElement(collision, "surface")
        contact = ET.SubElement(collision, "contact")
        collide_bitmask = ET.SubElement(collision, "collide_bitmask")
        collide_bitmask.text = "0x01"

class WorldStateSDFWriter(WriterInterface):
    """ Writes the state of all objects in SDF format. """

    def __init__(self, config):
        WriterInterface.__init__(self, config)
        self._output_dir = self.config.get_string("output_dir", "")
        self._world_name = self.config.get_string("world_name", "world.sdf")

    def run(self):
        """ Collect all mesh objects and writes their sdf element."""
        objects = []
        for object in get_all_blender_mesh_objects():
            objects.append(object)
        
        sdf = ET.Element('sdf', attrib={'version':'1.8'})
        world = ET.SubElement(sdf, 'world', attrib={'name' : 'default'})

        export_sdf(world, "/home/mh/repos/BlenderProc/blender_to_sdf_output/", objects)

        ## sdf write to file
        xml_string = ET.tostring(sdf, encoding='unicode')
        reparsed = minidom.parseString(xml_string)

        sdf_file = open(prefix_path+self._world_name, "w")
        sdf_file.write(reparsed.toprettyxml(indent="  "))
        sdf_file.close()

        ##############################
        ### generate model.config ####
        ##############################
        model_config_filename = 'model.config'

        model = ET.Element('model')
        name = ET.SubElement(model, 'name')
        name.text = model_name
        version = ET.SubElement(model, 'version')
        version.text = "1.0"
        sdf_tag = ET.SubElement(model, "sdf", attrib={"sdf":"1.8"})
        sdf_tag.text = self._world_name

        author = ET.SubElement(model, 'author')
        name = ET.SubElement(author, 'name')
        name.text = "Generated by blender SDF tools"

        xml_string = ET.tostring(model, encoding='unicode')
        reparsed = minidom.parseString(xml_string)

        config_file = open(prefix_path+model_config_filename, "w")
        config_file.write(reparsed.toprettyxml(indent="  "))
        config_file.close()
