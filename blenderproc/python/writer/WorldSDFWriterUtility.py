from blenderproc.python.utility.BlenderUtility import get_all_blender_mesh_objects
from blenderproc.python.modules.writer.WriterInterface import WriterInterface
import xml.etree.ElementTree as ET
from os import path
from xml.dom import minidom
from typing import List
import bpy

from blenderproc.python.types.MeshObjectUtility import MeshObject


def write_sdf(output_dir : str, world_name : str, objects: List[bpy.types.Object]):
    """ Writes the state of all objects in SDF format. """
    
    sdf = ET.Element('sdf', attrib={'version':'1.8'})
    world = ET.SubElement(sdf, 'world', attrib={'name' : 'default'})

    for mesh_object in objects:
        bpy.ops.object.select_all(action='DESELECT')
        bpy.context.scene.objects[mesh_object.name].select_set(True)

        # Exports the dae file and its associated textures
        bpy.ops.wm.collada_export(
            filepath=path.join(output_dir, "meshes", mesh_object.name + '.dae'),
            check_existing=False,
            filter_blender=False,
            filter_image=False,
            filter_movie=False,
            filter_python=False,
            filter_font=False,
            filter_sound=False,
            filter_text=False,
            filter_btx=False,
            filter_collada=True,
            filter_folder=True,
            filemode=8,
            selected=True
        )
        WorldSDFWriterUtility.append_model(mesh_object, world, output_dir)

    # Write sdf to file
    xml_string = ET.tostring(sdf, encoding="unicode")
    reparsed = minidom.parseString(xml_string)

    sdf_file = open(path.join(output_dir, world_name + ".sdf"), "w")
    sdf_file.write(reparsed.toprettyxml(indent="  "))
    sdf_file.close()

    ##############################
    ### generate model.config ####
    ##############################
    model_config_filename = 'model.config'

    model = ET.Element('model')
    name = ET.SubElement(model, 'name')
    name.text = world_name
    version = ET.SubElement(model, 'version')
    version.text = "1.0"
    sdf_tag = ET.SubElement(model, "sdf", attrib={"sdf":"1.8"})
    sdf_tag.text = world_name

    author = ET.SubElement(model, 'author')
    name = ET.SubElement(author, 'name')
    name.text = "Generated by blender SDF tools"

    xml_string = ET.tostring(model, encoding='unicode')
    reparsed = minidom.parseString(xml_string)

    config_file = open(output_dir+model_config_filename, "w")
    config_file.write(reparsed.toprettyxml(indent="  "))
    config_file.close()

class WorldSDFWriterUtility:

    @staticmethod    
    def append_model(mesh: bpy.types.Object, world: ET.SubElement, meshs_dir : str):
        """
        return model xml element
        """

        mesh_path = "meshes/" + mesh.name + '.dae'

        # 1 model and 1 link
        model = ET.SubElement(world, "model", attrib={"name": mesh.name})
        static = ET.SubElement(world, "static")
        static.text = "true"
        link = ET.SubElement(model, "link", attrib={"name": mesh.name+"_link"})
        # for each geometry in geometry library add a <visual> tag

        visual = ET.SubElement(link, "visual", attrib={"name": "visual"})

        geometry = ET.SubElement(visual, "geometry")
        mesh_el = ET.SubElement(geometry, "mesh")
        uri = ET.SubElement(mesh_el, "uri")
        uri.text = path.join(meshs_dir, mesh_path)
        submesh = ET.SubElement(mesh_el, "submesh")
        submesh_name = ET.SubElement(submesh, "name")
        submesh_name.text = mesh.name

        ## sdf collision tags
        collision = ET.SubElement(link, "collision", attrib={"name": "collision"})

        geometry = ET.SubElement(collision, "geometry")
        mesh_geo_el = ET.SubElement(geometry, "mesh")
        uri = ET.SubElement(mesh_geo_el, "uri")
        uri.text = path.join(meshs_dir, mesh_path)

        surface = ET.SubElement(collision, "surface")
        contact = ET.SubElement(collision, "contact")
        collide_bitmask = ET.SubElement(collision, "collide_bitmask")
        collide_bitmask.text = "0x01"

    @staticmethod   
    def add_attenuation_tags(light_tag, blender_light):
        attenuation = ET.SubElement(light_tag, "attenuation")
        range = ET.SubElement(attenuation, "range")
        range.text = str(blender_light.cutoff_distance)
        linear_attenuation = ET.SubElement(attenuation, "linear")
        linear_attenuation.text = str(blender_light.linear_attenuation)
        quad_attenuation = ET.SubElement(attenuation, "quadratic")
        quad_attenuation.text = str(blender_light.quadratic_coefficient)
        const_attenuation = ET.SubElement(attenuation, "constant")
        const_attenuation.text = str(blender_light.constant_coefficient)

    @staticmethod    
    def export_sdf(world_el, prefix_path, mesh_objects):
        meshes_folder_prefix = 'meshes/'

        for mesh_object in mesh_objects:
            dae_filename = mesh_object.name()+'.dae'
            model_name = mesh_object.name()

            # Deselect all objects
            bpy.ops.object.select_all(action='DESELECT')
        
            mesh_object.select_set(True)    
            # Exports the dae file and its associated textures
            bpy.ops.wm.collada_export(filepath=prefix_path+meshes_folder_prefix+dae_filename, check_existing=False, filter_blender=False, filter_image=False, filter_movie=False, filter_python=False, filter_font=False, filter_sound=False, filter_text=False, filter_btx=False, filter_collada=True, filter_folder=True, filemode=8, use_selection=True)

            # 1 model and 1 link
            model = ET.SubElement(world_el, "model", attrib={"name":"test"})
            static = ET.SubElement(model, "static")
            static.text = "true"
            link = ET.SubElement(model, "link", attrib={"name":"testlink"})
            # for each geometry in geometry library add a <visual> tag
            visual = ET.SubElement(link, "visual", attrib={"name":o.name})

            geometry = ET.SubElement(visual, "geometry")
            mesh = ET.SubElement(geometry, "mesh")
            uri = ET.SubElement(mesh, "uri")
            uri.text = dae_filename
            submesh = ET.SubElement(mesh, "submesh")
            submesh_name = ET.SubElement(submesh, "name")
            submesh_name.text = o.name

            ## sdf collision tags
            collision = ET.SubElement(link, "collision", attrib={"name":"collision"})

            geometry = ET.SubElement(collision, "geometry")
            mesh = ET.SubElement(geometry, "mesh")
            uri = ET.SubElement(mesh, "uri")
            uri.text = dae_filename

            collide_bitmask = ET.SubElement(collision, "collide_bitmask")
            collide_bitmask.text = "0x01"
